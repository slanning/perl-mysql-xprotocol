Experimenting with the MySQL X Protocol

* Context

* Usage of the protocol

* Pipelining benchmark

* Plans

* Links


Context

* introduced in MySQL 5.7.12

* meant as a foundation for future features

* asynchronous API, pipelining


Usage of the protocol

* mysql> install plugin mysqlx soname 'mysqlx.so'; ...

* port 33060

* Message: 4-byte length, 1-byte Message type, payload

* payload is a Google Protocol Buffer


Usage of the protocol

* .proto files specify Message structure/datatypes

* example:

 message AuthenticateStart {
   required string mech_name = 1;
   optional bytes auth_data = 2;
   optional bytes initial_response = 3;
 }


Usage of the protocol

* protoc compiler generates code

* for Perl: Google::ProtocolBuffers::Dynamic

* example:

 $obj = Mysqlx::Session::AuthenticateStart->new({
     mech_name => 'MYSQL41'
 });
 $payload = Mysqlx::Session::AuthenticateStart->encode($obj);
 $msg = $len . $type . $payload;

 $sock->send($msg);

 $sock->read($buf, 5);
 $sock->read($payload, $len - 1);


Usage of the protocol

* example client-server messages

* AUTHENTICATE

 Client --> Server:  Session::AuthenticateStart
 Client <-- Server:  Session::AuthenticateContinue
 Client <-- Server:  Notice::Frame (CLIENT_ID_ASSIGNED)
 Client --> Server:  Session::AuthenticateContinue
 Client <-- Server:  Session::AuthenticateOk

* SELECT

 Client --> Server:  Sql::StmtExecute
 Client <-- Server:  Resultset::ColumnMetaData (each column)
 Client <-- Server:  Resultset::Row (each row)
 Client <-- Server:  Resultset::FetchDone
 Client <-- Server:  Notice::Frame (ROWS_AFFECTED)
 Client <-- Server:  Sql::StmtExecuteOk


Pipelining benchmark

* 100 SELECTs by primary key

* benchmark results:

 CROSS-DC
     pipelined:   59ms
 non-pipelined:  982ms
           DBI: 1248ms

 SAME DC
     pipelined:   44ms
 non-pipelined:   89ms
           DBI:   34ms

* cross-DC: pipelined much faster than non-pipelined

* same DC: DBD::mysql still fastest


Possible personal Perl plans

* X Protocol module --> X DevAPI

* DBI integration

* mysqlsh Perl support


More info

* 6-part blog series at http://mysqlserverteam.com/

* MySQL Internals Manual https://dev.mysql.com/doc/internals/en/x-protocol.html

* https://dev.mysql.com/worklog/task/?id=8639

* http://dev.mysql.com/doc/x-devapi-userguide/en/devapi-users-introduction.html

* https://github.com/mysql/mysql-server/tree/5.7/rapid/plugin/x/protocol
